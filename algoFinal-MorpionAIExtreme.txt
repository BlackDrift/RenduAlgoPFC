#DEBUT
#On importe la bibiliothèque random
#On crée la classe objet TicTacToe   
    
    #On définit une surcharge de la méthode constructeur __init__ avec comme paramètre un booléen secondPlayer qui atteste de la présence (ou non) d'un deuxième joueur 
        #Initialisation d'un tableau de jeu (vide) gamePlate, attribut de l'objet TicTacToe
        #s'il y a un second joueur :
            #alors
            #Pas de présence d'une IA
        #sinon (il n'y a qu'un seul joueur) :
            #alors
            #on indique la présence d'une IA
            #on initialise l'attribut AIExtreme comme étant un objet ExtremeIA
        #Initialisation de l'attribut pointOwner pour le premier joueur, attribut de l'objet TicTacToe (on part du principe qu'en Player VS IA le joueur commence)
        #Initialisation d'un tableau vide takenCoords attribut de l'objet TicTacToe 

    #On définit la méthode affiche avec comme paramètre une liste content qui affichera le tableau du jeu en console
        # pour i allant de 0 à la longueur du tableau content -1
            #On initialise la variable contentLine égale à une chaine de caractères vide
            #pour j allant de 0 à la longueur du tableau content -1
                #On ajoute à contentLine la valeur de gamePlate de coordonnées (i,j)
                #On ajoute à contentLine la chaine de caractères " | "
            #On affiche en console contentLine

    #On définit la méthode ticTacToeStart qui ne prend pas de paramètres qui créera le tableau. Elle ne prend pas de paramètres.
        #pour i allant de 0 à 2 
            #on ajoute un tableau vide à la fin de l'attribut gamePlate
            #pour une variable quelconque allant de 0 à 2
                #On rajoute "*" dans le tableau d'index i de l'attribut gamePlate
        #on affiche le gamePlate
    
    #On définit la méthode win avec comme paramètre pointOwner qui annonce le vainqueur de la partie et prend comme paramètre la chaine de caractères pointOwner (qui vaut "X" ou "O")
        #si l'IA est présente :
            #alors
            #si pointOwner est égale à "X" :
                #alors
                #Retourner que le joueur a gagné
            #sinon :
                #alors
                #On retourne que le vainqueur est l'IA
        #sinon :
            #Si pointOwner est égale à "X" :
                #alors
                #On retourne que le vainqueur est le joueur 1
            #sinon :
                #alors
                #On retourne que le vainqueur est le joueur 2
    
   
   
    #On définit la méthode draw qui ne prend pas de paramètre qui annonce une égalité s'il y en a une 
        #On renvoie qu'il s'agit est une égalité 



    #On définit la méthode playerTurn qui ne prends pas de paramètres qui seras utile pour les actions à faire du joueur
        #On définit la variable rowCoord qui est le résultat entier d'un input qui demande au joueur un nombre entre 1 et 3, nombre auquel on retire 1 (pour les index)
        #On vérifie que rowCoord est supérieure ou égale à 0 et dans le même temps inférieure ou égale à 2, si ce n'est pas le cas on renvoie un message expliquant l'origine de l'erreur
        #On définit la variable colCoord qui est le résultat entier d'un input qui demande au joueur un nombre entre 1 et 3, nombre auquel on retire 1 (pour les index)
        #On vérifie que colCoord est supérieure ou égale à 0 et dans le même temps inférieure ou égale à 2, si ce n'est pas le cas on renvoie un message expliquant l'origine de l'erreur
        #On retourne le tuple comoposé de rowCoord et colCoord

    #On définit la méthode botTurn qui ne prends pas de mparamètres, qui seras utile pour les actions à faire du bot
        #On définit la variable botRowCoord qui choisira au hasard un résultat entre 0 et 2
        #On définit la variable botColCoord qui choisira au hasard un résultat entre 0 et 2
        #On retourne le tuple composé de botRowCoord et botColCoord

    #On définit la méthode playerWin qui prend un paramètre player et renvoie si ce dernier a gagné
        #On définit une variable win égale à None
        #On définit une variable length qui est égale à la longueur du tableau attribut gamePlate (le nombre de lignes)
        
        #On vérifie d'abord les lignes
        #pour i allant de 0 à length-1 :
            #On redéfinit win égale à True
            #pour j allant de 0 à length-1 :
                #si l'élement d'index (i,j) dans l'attribut tableau gamePlate est différent de player :
                    #alors
                    #On redéfinit win égal à False
                    #La boucle s'arrête
            #si win est égal à True :
                #alors
                #On retourne la valeur de win

        #on vérifie ensuite les colonnes
        # pour i allant de 0 à length -1 :  
            #On redéfinit win égale à True 
            #pour j allant de 0 à length -1 :
                #si l'élement d'index (j,i) dans l'attribut tableau gamePlate est différent de player :
                    #alors
                    #On redéfinit win égal à False
                    #La boucle s'arrête
            #si win est égal à True :
                #alors
                # On retourne la valeur de win

        #on vérifie les diagonales
        #On redéfinit win égale à True
        #pour i allant de 0 à lenght-1 :
            #si l'élément d'index (i,i) dans l'attribut tableau gamePlate est différent de player :
                #alors
                #on redéfinit win égal à False
                #on arrête la boucle
        #si win est égal à True:
            #alors
            #On retourne la valeur de win
        
        #On redéfinit win égale à True
        #pour i allant de 0 à length-1 :
            #si l'élment d'index (i,lenght-1-i) dans l'attribut tableau gamePlate est différent de player :
                #alors
                #on redéfinit win égal à False
                #on arrête la boucle
        
        #si win est True:
            #alors
            #on retourne la valuer win
        #on retourne False

    
    #On définit la méthode swapTurn qui prend un paramètre player et renvoie le joueur opposé
        #On renvoie 'X' si player est égale à 'O' sinon on renvoie 'O'
    
    #On définit la méthode filledGamePlate qui ne prend pas de paramètre et vérifie si le tableau est complet ou non
        #On définit la variable filled égale à True
        #pour i allant de 0 à la longueur du tableau attribut gamePlate -1 :
            #pour j allant de 0 à la longueur du tableau attribut gamePlate -1 :
                #si la valeur de coordonnées (i,j) dans gamePlate est égale à '*' :
                    #alors
                    #On redéfinit filled égale à False
                    #on arrête la boucle
        #si filled est True
            #alors
            #on retourne la valeur de filled
        #on retourne False

    #On définit la méthode ticTacToeGame qui ne prend pas de paramètre et simule dans son intégralité une partie de morpion
        #on définit une liste vide takenCoords qui enregistre les coordonnées placées au fur et à mesure
        #On définit une variable continuing égale à True
        #si l'attribut iaMode est égal à True :
            #alors
            #On redéfinit continuing est égale à True :
                #on définit l'attribut playerCoords en appelant la méthode playerTurn
                #si l'élément de coordonnées playerCoords est différent de "*" dans gamePlate et que dans le même temps playerCoords n'est pas dans takenCoords :
                    #alors 
                    #on renvoie en console qu'il n'est pas possible de prendre une coordonnée déjà prise, il faut donc recommencer
                    #on redéfinit playerCoords en appelant la méthode playerTurn
                #sinon :
                    #alors
                    #on ajoute playerCoords à la fin de takenCoords
                #on insère "X" à l'index de la deuxième coordonnée de l'attribut playerCoords dans le tableau du tableau gamePlate qui est à l'index de la première coordonnée de playerCoords
                #on retire l'élément à l'index de la deuxième coordonnée +1 de l'attribut playerCoords dans le tableau du tableau gamePlate qui est à l'index de la première coordonnée de playerCoords
                #on appelle la méthode affiche avec en paramètre l'attribut tableau gamePlate

                #Si la méthode playerWin avec en paramètre l'attribut pointOwner est égale à True :
                    #alors
                    #On redéfinit continuing à False
                    #On appelle la méthode win avec comme paramètre l'attribut pointOwner
                    #On arrête la boucle
                #On redéfinit l'attribut pointOwner en appelant la méthode swapTurn avec en paramètre l'attribut pointOwner
                
                #On définit l'attribut botCoords en appelant la méthode botTurn
                #tant que l'élement de coordonnées botCoords est différent de "*" dans gamePlate :
                    #alors
                    #On redéfinit l'attribut botCoords en appelant la méthode botTurn
                #On ajoute l'attribut botCoords à la fin du tableau takenCoords
                
                #On renvoie en console les coordonnées où l'IA a joué
                #on insère "O" à l'index de la deuxième coordonnée de l'attribut botCoords dans le tableau du tableau gamePlate qui est à l'index de la première coordonnée de botCoords
                #on retire l'élément à l'index de la deuxième coordonnée +1 de l'attribut botCoords dans le tableau du tableau gamePlate qui est à l'index de la première coordonnée de botCoords
                #on appelle la méthode affiche avec en paramètre l'attribut tableau gamePlate

                #Si la méthode playerWin avec en paramètre l'attribut pointOwner est égale à True :
                    #alors
                    #On redéfinit continuing à False
                    #On appelle la méthode win avec comme paramètre l'attribut pointOwner
                    #On arrête la boucle
                #On redéfinit l'attribut pointOwner en appelant la méthode swapTurn avec en paramètre l'attribut pointOwner
                
                #on vérifie que la longueur de takenCoords est bien inférieure ou égale à 9, dans le cas contraire c'est qu'il y a une erreur interne
                #si la méthode filledGamePlate renvoie True :
                    #alors
                    #On redéfinit continuing égale à False
                    #On appelle la méthode draw sans paramètre
                    #On arrête la boucle    


        #sinon :
            #On redéfinit continuing est True:
                #on définit l'attribut playerCoords en appelant la méthode playerTurn
                #si l'élément de coordonnées firstPlayerCoords est différent de "*" dans gamePlate et que dans le même temps playerCoords n'est pas dans takenCoords :
                    #alors
                    #on renvoie en console qu'il n'est pas possible de prendre une coordonnée déjà prise, il faut donc recommencer
                    #on redéfinit l'attribut playerCoords en appelant la méthode playerTurn
                #sinon
                    #alors
                    #On rajoute firstPlayerCoords à takenCoords
                
                #on insère la valeur de l'attribut pointOwner à l'index de la deuxième coordonnée de l'attribut firstPlayerCoords dans le tableau du tableau gamePlate qui est à l'index de la première coordonnée de firstPlayerCoords
                #on retire l'élément à l'index de la deuxième coordonnée +1 de l'attribut firstPlayerCoords dans le tableau du tableau gamePlate qui est à l'index de la première coordonnée de firstPlayerCoords
                #on appelle la méthode affiche avec en paramètre l'attribut tableau gamePlate

                #Si la méthode playerWin avec en paramètre l'attribut pointOwner est égale à True :
                    #alors
                    #On redéfinit continuing égal à False
                    #on appelle la méthode win avec comme paramètre l'attribut pointOwner
                    #On arrête la boucle

                #si la méthode filledGamePlate est égale à True:
                    #alors
                    #On redéfinit continuing égal à False
                    #on appelle la méthode draw
                    #On arrête la boucle

                #On redéfinit l'attribut pointOwner en appelant la méthode swapTurn avec en paramètre l'attribut pointOwner

                #On redéfinit secondPlayerCoords en appelant la méthode playerTurn
                #si l'élément de coordonnées secondPlayerCoords est différent de "*" dans gamePlate et que dans le même temps secondPlayerCoords n'est pas dans takenCoords :
                    #alors
                    #on renvoie en console qu'il n'est pas possible de prendre une coordonnée déjà prise, il faut donc recommencer
                    #on redéfinit secondPlayerCoords en appelant la méthode playerTurn
                #sinon:
                    #alors
                    #On rajoute secondPlayerCoords à takenCoords
                    
                #on insère la valeur de l'attribut pointOwner à l'index de la deuxième coordonnée de l'attribut secondPlayerCoords dans le tableau du tableau gamePlate qui est à l'index de la première coordonnée de secondPlayerCoords
                #on retire l'élément à l'index de la deuxième coordonnée +1 de l'attribut secondPlayerCoords dans le tableau du tableau gamePlate qui est à l'index de la première coordonnée de secondPlayerCoords
                #on appelle la méthode affiche avec en paramètre l'attribut tableau gamePlate

                #Si la méthode playerWin avec en paramètre l'attribut pointOwner est égale à True :
                    #alors
                    #on redéfinit continuing est égal à False
                    #on appelle la méthode win avec comme paramètre l'attribut pointOwner
                    #on arrête la boucle

                #si la méthode filledGamePlate sest égale à True:
                    #alors
                    #on redéfinit continuing égal à False 
                    #on appelle la méthode draw
                    #on arrête la boucle

                #On redéfinit pointOwner en appelant swapTurn avec comme paramètres pointOwner
                
#On crée la classe object ExtremeIA 
    
    #On définit une surcharge de la méthode constructeur __init__ avec comme paramètre game un objet de classe TicTacToe (une partie de morpion)
        #Initialisation de l'attribut tableau AICoords (vide)
        #Initialisation de l'attribut tableau PlayerCoords (vide)
        #initialisation de l'attribut game égal au paramètre game (la partie de morpion)
        #Initialisation de l'attribut gameTab égal au gamePlate de game (le tableau de jeu de la partie)
        #Initialisation de l'attribut turnOne égal à True (le tour un de la partie)

    #On définit la méthode rowCheck qui prend en paramètre le joueur dont on veut vérifier la potentielle victoire (s'il est sur le point de compléter une ligne)
        #On définit length égal à la longueur de gameTab
        #On définit count un compteur égal à 0
        #pour i allant de 0 à length - 1 :
            #pour j allant de 0 à length - 1 :
                #si le point de coordonnées (i,j) dans le gameTab est égal à player :
                    #alors
                    #On ajoute 1 à count
                #si count est égal à 2 et que le caractère "*" est présent dans la ligne du tableau :
                    #alors
                    #On définit emptyPlace comme étant l'index dans le gameTab de la valeur "*"
                    #On renvoie i et emptyPlace sous forme de tuple
            #On remet count à 0
        #On renoie du vide (None)

    #On définit la méthode colCheck qui prend en paramètre le joueur dont on veut vérifier la potentielle victoire (s'il est sur le point de compléter une colonne)
        #On définit length égal à la longueur du gameTab
        #On définit count égal à 0
        #pour i allant de 0 à length - 1 :
            #Initialisation de la liste column vide
            #pour x allant de 0 à length - 1:
                #On ajoute à la fin de la liste column la valeur dans gameTab de coordonnées (x,i) 
            #pour j allant de 0 length - 1:
                #si la valeur d'index j dans column est égal à player:
                    #alors
                    #On ajoute 1 à count
                #si count est égal à 2 et que le caractère "*" est présent dans la ligne du tableau :
                    #alors
                    #On définit emptyPlace comme étant l'index "*" dans column
                    #On renvoie emptyplace et i sous forme de tuple
        #On renvoie du vide (None)
    
    #On définit une méthode diagonalCheck qui prend en paramètre le joueur dont on veut vérifier la potentielle victoire (s'il est sur le point de compléter une diagonale)
        #On définit length égal à la longueur du gameTab
        #On définit firstDiagonal un tableau vide
        #On définit secondDiagonal un deuxième tableau vide
        #pour x allant de 0 à length - 1 :
            #On ajoute à la fin de firstDiagonal la valeur de coordonnées (x,x) dans gameTab ainsi que le tuple de ces coordonnées 
            #On ajoute à la fin de secondDiagonal la valeur de coordonnées (x,length - 1 - x) dans gameTab ainsi que le tuple de ces coordonnées 
        #On définit count égal à 0
        #pour i allant de 0 à length - 1 :
            #si la valeur d'index 0 à l'index i de firstDiagonal est égale à player :
                #alors
                #on ajoute 1 à count
            #si count est égal à 2 :
                #alors
                #pour z allant de 0 à length - 1 :
                    #si la valeur d'index 0 à l'index z de firstDiagonal est égale au caractère "*" :
                        #alors
                        #On renvoie la valeur d'index 1 à l'index z de firstDiagonal
        #On remet count à 0
        #pour j allant de 0 à length - 1 :
            #si la valeur d'index 0 à l'index j de secondDiagonal est égale à player :
                #alors
                #on ajoute 1 à count
            #si count est égal à 2 :
                #alors
                #pour z allant de 0 à length - 1 :
                    #si la valeur d'index 0 à l'index z de secondDiagonal est égale au caractère "*" :
                        #alors
                        #On renvoie la valeur d'index 1 à l'index z de secondDiagonal
        #On renvoie du vide (None)

    #On définit une méthode botTurn qui ne prend pas de paramètres
        #On définit coordsPlayed égal à l'attribut takenCoords de la partie
        #On définit temp = None
        #On ajoute à la fin de la liste PlayerCoords la valeur dans coordsPlayed de coordonnée (-1)
        #Tant que turnOne est vrai :
            #alors
            #pour i allant de 0 à coordsPlayed - 1 :
                #si la valeur d'index i dans coordsPlayed n'est pas dans AICoords or l'index i dans coordsPlayed n'est pas dans playerCoords:
                    #alors
                    #On ajoute à la fin de PlayerCoords la valeur coordsPlayed d'index i
                    #On redéfinit temp égal à la valeur d'index i dans coordsPlayed
                #si temp est égal aux valeurs de coordonnées (0,0) ou aux valeurs de coordonnées (0,2) ou aux valeurs de coordonnées (2,0) ou aux valeurs de coordonnées (2,2):
                    #alors
                    #On ajoute à la fin de AICoords la valeur de coordonnée (1,1)
                    #On redéfinit l'attribut turnOne à False 
                    #On retourne la dernière valeur d'AICoords
                #sinon si temp d'index 0 est égal à 0 :
                    #alors
                    #On ajoute à la fin de Aicoords les valeurs du premier index de temp auquel est ajouté 2, et le deuxième index de temp, le tout sous forme de tuple
                    #On redéfinit l'attribut turnOne à False
                    #On retourne la dernière valeur d'AICoords
                #sinon si temp d'index 0 est égal à 2 :
                    #alors
                    #On ajoute à la fin de Aicoords les valeurs du premier index de temp auquel est soustrait 2, et le deuxième index de temp, le tout sous forme de tuple
                    #On redéfinit l'attribut turnOne à False
                    #On retourne la dernière valeur d'AICoords
                #sinon si temp d'index 1 est égal à 0 :
                    #alors
                    #On ajoute à la fin de Aicoords les valeurs du premier index de temp, et le deuxième index de temp auquel est ajouté 2, le tout sous forme de tuple
                    #On redéfinit l'attribut turnOne à False
                    #On retourne la dernière valeur d'AICoords
                #sinon si temp d'index 1 est égal à 2 :
                    #alors
                    #On ajoute à la fin de Aicoords les valeurs du premier index de temp, et le deuxième index de temp auquel est soustrait 2, le tout sous forme de tuple
                    #On redéfinit l'attribut turnOne à False
                    #On retourne la dernière valeur d'AICoords
                #sinon si temp égal au couple de coordonnées (1,1) :
                    #alors
                    #On définit x une variable égale à la méthode randrange (issue de random) qui renverra soit 0 soit 2 
                    #On définit y une variable égale à la méthode randrange (issue de random) qui renverra soit 0 soit 2
                    #On ajoute à la fin de AICoords le tuple de valeurs x et y
                    #On redéfinit l'attribut turnOne égal à False
                    #On renvoie la dernière valeur de AICoords
        #on redéfinit temp comme étant un tableau vide
        #on définit tempATK un tableau vide
        #si la méthode rowCheck avec en paramètre le caractère "X" ne renvoie pas du vide (None) et que son résultat n'est pas dans temp :            
            #alors
            #on ajoute à la fin de temp le résultat de la méthode rowCheck avec en paramètre le caractère "X"
        #si la méthode colCheck avec en paramètre le caractère "X" ne renvoie pas du vide (None) et que son résultat n'est pas dans temp :            
            #alors
            #on ajoute à la fin de temp le résultat de la méthode colCheck avec en paramètre le caractère "X"
        #si la méthode diagonalCheck avec en paramètre le caractère "X" ne renvoie pas du vide (None) et que son résultat n'est pas dans temp :            
            #alors
            #on ajoute à la fin de temp le résultat de la méthode diagonalCheck avec en paramètre le caractère "X"
        
        #si la méthode rowCheck avec en paramètre le caractère "O" ne renvoie pas du vide (None) et que son résultat n'est pas dans temp :            
            #alors
            #on ajoute à la fin de temp le résultat de la méthode rowCheck avec en paramètre le caractère "O"
        #si la méthode colCheck avec en paramètre le caractère "O" ne renvoie pas du vide (None) et que son résultat n'est pas dans temp :            
            #alors
            #on ajoute à la fin de temp le résultat de la méthode colCheck avec en paramètre le caractère "O"
        #si la méthode diagonalCheck avec en paramètre le caractère "O" ne renvoie pas du vide (None) et que son résultat n'est pas dans temp :            
            #alors
            #on ajoute à la fin de temp le résultat de la méthode diagonalCheck avec en paramètre le caractère "O"

        #si la longeur du tableau tempATK est supérieure ou égale à 1 :
            #alors
            #si la longueur de tempATK est supérieure à 1 :
                #alors
                #on définit x un entier entre 0 et la longueur de tempATK
                #on ajoute à l'attribut tableau AICoords la valeur d'index x de tempATK
            #sinon si la longueur de tempATK est égale à 1 :
                #alors 
                # on ajoute tempATK à l'attribut tableau AICoords
            #sinon si tempATK est égal à un tableau vide et que la méthode filledGamePlate de l'attribut game ne renvoie pas vrai :
                #Alors
                #on définit AICoords égal à un tuple de deux valeurs aléatoires entre 0 et 2
                #on ajoute à la fin de l'attribut tableau AICoords la valeur d'AICoords
        #sinon :
            #alors
            #si la longueur de temp est supérieure à 1 :
                #alors
                #on définit x un entier entre 0 et la longueur de temp
                #on ajoute à l'attribut tableau AICoords la valeur d'index x de temp
            #sinon si la longueur de temp est égale à 1 :
                #alors 
                # on ajoute temp à l'attribut tableau AICoords
            #sinon si temp est égal à un tableau vide et que la méthode filledGamePlate de l'attribut game ne renvoie pas vrai :
                #Alors
                #on définit AICoords égal à un tuple de deux valeurs aléatoires entre 0 et 2
                #on ajoute à la fin de l'attribut tableau AICoords la valeur d'AICoords

        #On renvoie la valeur du dernier index de l'attribut tableau AICoords

#on définit une variable game égale à un objet TicTacToe sans paramètre (une partie de joueur contre bot)
#on applique la méthode ticTacToeStart à game (pour initialiser le tableau de jeu)
#on applique la méthode ticTacToeGame à game (pour démarrer la partie)

#FIN
